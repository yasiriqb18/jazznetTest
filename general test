Question1. 
I tried to find the solution of this problem in various way. From very simple to little more
complex and recursive and brute force approach. but the give below seems the easiest to run and understand. 
Not very memory efficient though.

# This function gives you the Fibonacci sequence certain value. 
def findfib(fn):
    if fn < 1:
        print("wrong number")
    elif fn == 0:
        return 0
    elif fn == 1:
        return 1
    else:
        return (findfib(fn-1) + findfib(fn-2))
print ("give you the certain fib number ->",findfib(10)) #change the fn value to know the Fibonacci value in the sequence
################################################

fn = [1,2]
while fn[-1] < 100:
    fn.append(fn[-1] + fn[-2])
print(fn)
evenf = []
for n in fn:
    if n % 2 ==0:
        evenf.append(n)
print(evenf)

sum =0
for n in evenf:
    sum += n
print(sum)

output
PS D:\TestPythonFiles> python -i fib.py
give you the certain fib number -> 55
[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]


â€ƒ
Question 2. 
They are, Hash table, Trees data structures, Dictionaries 
Advantages: They are very efficient for finding, inserting and updating.  Storing in hash table will not always work well as there is a chance that several elements may collide. Which is one of the main issues that has to be overcome when using hash tables.  Hash functions are used to simplify the complex data in the hash table. 
In contrast, the tree data structure is a collection of nodes and their main use is storing and sorting data. You cant have duplicate keys in a same way as you have duplicate key in hash table. 
Dictionaries are the implantation of associative arrays in python. 

Question 3. 

class sort:
    def __init__(self, data):
        self.data = data
        self.next = None

class list:
    def __init__ (self):
        self.head =None
    def peeklist(self):
        items = self.head
        while items:
            print(items.data, end = "->")
            items = items.next
    def append(self,new_data):
        new_node = sort(new_data)
        if self.head is None:
            self.head = new_node
            return
        endnode = self.head
        while endnode.next:
            endnode = endnode.next
        endnode.next = new_node
def mergelists(h1,h2):
    items = None
    if h1 is None:
        return h2
    if h2 is None:
        return h1
    if h1.data <= h2.data:
        items = h1
        items.next = mergelists(h1.next, h2)
    else:
        items = h2
        items.next = mergelists(h1, h2.next)
    return items
#call the list objects in the linter and pass the values as mentioned in the question.
if __name__ =="__main__":
 
  list1 = list()
        list1.append(1)
        list1.append(4)
        list1.append(6)

        list2 = list()
        list2.append(2)
        list2.append(3)
        list2.append(5)
        list3= list()
        list3.head = mergelists(list1.head, list2.head)
        print("merged list",end ="")
        list3.peeklist()
OUTPUT
PS C:\Python34> python -i F:\linked\test\merge.py
merged list1->2->3->4->5->6->>>>

